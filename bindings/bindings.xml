<?xml version="1.0"?>
<typesystem package="SciQLopBindings">
    <system-include file-name="memory"/>
    <rejection class="std" function-name="^[a-z_]+$"/>
    <system-include file-name="memory"/>
    <system-include file-name="shared_ptr.h"/>
    <load-typesystem name="typesystem_core.xml" generate="no" />
    <load-typesystem name="typesystem_gui.xml" generate="no" />
    <load-typesystem name="typesystem_widgets.xml" generate="no" />
    <primitive-type name="std::string"/>
    <primitive-type name="std::size_t"/>
    <primitive-type name="long"/>

    <interface-type name="IDataProvider" force-abstract="yes"/>
    <namespace-type name="std">
        <primitive-type name="size_t"/>
        <primitive-type name="nullptr_t"/>
        <enum-type name="pointer_safety"/>
        <include file-name="memory" location="global"/>
        <smart-pointer-type name="shared_ptr" type="shared" getter="get" ref-count-method="use_count" instantiations="IDataProvider">
            <include file-name="memory" location="global"/>
        </smart-pointer-type>
    </namespace-type>

    <enum-type name="DataSeriesType"/>
    <container-type name="std::vector" type="vector">
        <include file-name="vector" location="global"/>
        <conversion-rule>
            <native-to-target>
                %INTYPE::size_type vectorSize = %in.size();
                PyObject* %out = PyList_New((int) vectorSize);
                for (%INTYPE::size_type idx = 0; idx &lt; vectorSize; ++idx) {
                    %INTYPE_0 cppItem(%in[idx]);
                    PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
                }
                return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                    Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                    int vectorSize = PySequence_Fast_GET_SIZE(seq.object());
                    %out.reserve(vectorSize);
                    for (int idx = 0; idx &lt; vectorSize; ++idx ) {
                        PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), idx);
                        %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                        %out.push_back(cppItem);
                    }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>
    <primitive-type name="NpArray" target-lang-api-name="PyObject">
      <include file-name="numpy_wrappers.hpp" location="local"/>
      <conversion-rule>
          <native-to-target>
          auto result = %in.py_object();
          return result;
          </native-to-target>
          <target-to-native>
            <add-conversion type="PyObject" check="NpArray::isNpArray(%in)">
            %out = %OUTTYPE(%in);
            </add-conversion>
          </target-to-native>
        </conversion-rule>
    </primitive-type>
    <namespace-type name="py" visible="false">
        <object-type name="DataProvider"/>
        <object-type name="ScalarTimeSerie" />
        <object-type name="VectorTimeSerie" />
        <object-type name="MultiComponentTimeSerie" />
        <object-type name="SpectrogramTimeSerie" />
        <object-type name="Product" />
    </namespace-type>
    <object-type name="SciQLopObject" />
    <object-type name="MainWindow" />
    <object-type name="SciQLopCore" />
    <object-type name="DataSources" />
</typesystem>



